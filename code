from tkinter import*
from tkinter import ttk
from PIL import Image,ImageTk                          #pip install pillow in terminal
import mysql.connector
from tkinter import messagebox

class student:
    def __init__(self,stu):
        self.stu=stu
        self.stu.geometry("1920x1200+0+0")                          #isme dimension dalne ha aapni screen k, ye +0 starting point bata raha ha 
        self.stu.title("Student management system")        #isme tum kuch bhi aapne project ka name dal sakte ho

        #variable declaration
        self.var_dep=StringVar()
        self.var_course=StringVar()
        self.var_year=StringVar()
        self.var_sem=StringVar()
        self.var_stu_ID=StringVar()
        self.var_name=StringVar()
        self.var_sec=StringVar()
        self.var_age=StringVar()
        self.var_gen=StringVar()
        self.var_pno=StringVar()
        self.var_email=StringVar()
        self.var_bus=StringVar()

        #1st image 
        img=Image.open(r"C:\Users\dahiy\OneDrive\Desktop\student\Images\srm1.png")
        img=img.resize((540,160),Image.LANCZOS)
        self.photo=ImageTk.PhotoImage(img)
        self.btn_1=Button(self.stu,image=self.photo,cursor="hand2")
        self.btn_1.place(x=0,y=0,width=520,height=160)
        #2nd image
        img_2=Image.open(r"C:\Users\dahiy\OneDrive\Desktop\student\Images\images_(1)-dszdYhTtd-transformed.jpeg")
        img_2=img_2.resize((540,160),Image.LANCZOS)
        self.photo_2=ImageTk.PhotoImage(img_2)
        self.btn_2=Button(self.stu,image=self.photo_2,cursor="hand2")
        self.btn_2.place(x=521,y=0,width=520,height=160)
        #3rd image
        img_3=Image.open(r"C:\Users\dahiy\OneDrive\Desktop\student\Images\mainbuilding.jpeg")
        img_3=img_3.resize((540,160),Image.LANCZOS)
        self.photo_3=ImageTk.PhotoImage(img_3)
        self.btn_3=Button(self.stu,image=self.photo_3,cursor="hand2")
        self.btn_3.place(x=1041,y=0,width=500,height=160)
        #background photo
        img_bg=Image.open(r"C:\Users\dahiy\OneDrive\Desktop\student\Images\images.png")
        img_bg=img_bg.resize((1550,1000),Image.LANCZOS)
        self.photo_bg=ImageTk.PhotoImage(img_bg)

          #frame
        bg_lbl=Label(self.stu,image=self.photo_bg,bd=2,relief=RIDGE)
        bg_lbl.place(x=0,y=160,width=1550,height=1000)

        lbl_title=Label(bg_lbl,text="STUDENT MANAGEMENT SYSTEM",font=("times new roman",24,"bold"),fg="white",bg="red")
        lbl_title.place(x=0,y=0,width=1520,height=60)
        
        Manage_frame=Frame(bg_lbl,bd=2,relief=RIDGE,bg="white")
        Manage_frame.place(x=13,y=60,width=1500,height=550)

        #left frame
        dataleftframe=LabelFrame(Manage_frame,bd=4,relief=RIDGE,padx=2,text="Student Information",font=("times new roman",20,"bold"),fg="green",bg="white")
        dataleftframe.place(x=10,y=10,width=550,height=525) # Student Information frame ka size yaha se change hoga

        #current course ka labelframe 
        std_lbl_info_frame=LabelFrame(dataleftframe,bd=4,relief=RIDGE,padx=2,text="Current Course Information",font=("times new roman",14,"bold"),fg="blue",bg="white")
        std_lbl_info_frame.place(x=0,y=0,width=540,height=120) #Current Course Information ka size yaha se change hoga 

        #label and combobox
        #department
        lbl_dep=Label(std_lbl_info_frame,text="Department:",font=("times new roman",14,"bold"),bg="white")
        lbl_dep.grid(row=0,column=0,padx=1,sticky=W)
        combo_dep=ttk.Combobox(std_lbl_info_frame,textvariable=self.var_dep,font=("times new roman",14,"bold"),width=15,state="readonly")
        combo_dep["value"]=("select department","Engineering","Law","Humanities","Hotel Management","Finance","Bioscience","Computer Application")
        combo_dep.current(0)
        combo_dep.grid(row=0,column=1,padx=1,pady=4,sticky=W)
        
        #course
        course_std=Label(std_lbl_info_frame,text="Courses:",font=("times new roman",14,"bold"),bg="white")
        course_std.grid(row=0,column=2,padx=1,sticky=W)
        combo_course=ttk.Combobox(std_lbl_info_frame,textvariable=self.var_course,font=("times new roman",14,"bold"),width=13,state="readonly")
        combo_course["value"]=("select course","Btech","LLB","BA","MA","Bcom","Bioengineering","BCA","MCA","BHM","BBA")
        combo_course.current(0)
        combo_course.grid(row=0,column=3,padx=1,pady=3,sticky=W)

        #year
        current_year=Label(std_lbl_info_frame,text="Year:",font=("times new roman",14,"bold"),bg="white")
        current_year.grid(row=1,column=0,padx=1,sticky=W)
        combo_year=ttk.Combobox(std_lbl_info_frame,textvariable=self.var_year,font=("times new roman",14,"bold"),width=15,state="readonly")
        combo_year["value"]=("select year","1st","2nd","3rd","4th","5th","6th")
        combo_year.current(0)
        combo_year.grid(row=1,column=1,padx=1,pady=4,sticky=W)

        #semester
        current_sem=Label(std_lbl_info_frame,text="Semester:",font=("times new roman",14,"bold"),bg="white")
        current_sem.grid(row=1,column=2,padx=1,sticky=W)
        combo_sem=ttk.Combobox(std_lbl_info_frame,textvariable=self.var_sem,font=("times new roman",14,"bold"),width=13,state="readonly")
        combo_sem["value"]=("select semester","1st","2nd","3rd","4th","5th","6th","7th","8th","9th","10th","11th","12th")
        combo_sem.current(0)
        combo_sem.grid(row=1,column=3,padx=1,pady=3,sticky=W)

        #student information ka labelframe 
        stu_info=LabelFrame(dataleftframe,bd=4,relief=RIDGE,padx=2,text="Student Details",font=("times new roman",14,"bold"),fg="blue",bg="white")
        stu_info.place(x=0,y=121,width=540,height=200) #student detail ka size yaha se change hoga 
        
        #labels and entry box
        #id
        stu_id=Label(stu_info,text="StudentID:",font=("times new roman",14,"bold"),bg="white")
        stu_id.grid(row=0,column=0,padx=1,sticky=W)
        id_entry=ttk.Entry(stu_info,textvariable=self.var_stu_ID,font=("times new roman",14,"bold"),width=17)
        id_entry.grid(row=0,column=1,padx=1,sticky=W)

        #name
        stu_name=Label(stu_info,text="Name:",font=("times new roman",14,"bold"),bg="white")
        stu_name.grid(row=0,column=2,padx=1,sticky=W)
        name_entry=ttk.Entry(stu_info,textvariable=self.var_name,font=("times new roman",14,"bold"),width=14)
        name_entry.grid(row=0,column=3,padx=1,sticky=W)

        #section
        stu_sec=Label(stu_info,text="section:",font=("times new roman",14,"bold"),bg="white")
        stu_sec.grid(row=1,column=0,padx=1,pady=10,sticky=W)
        section_entry=ttk.Entry(stu_info,textvariable=self.var_sec,font=("times new roman",14,"bold"),width=17)
        section_entry.grid(row=1,column=1,padx=1,pady=10,sticky=W)

        #age
        stu_age=Label(stu_info,text="Age:",font=("times new roman",14,"bold"),bg="white")
        stu_age.grid(row=1,column=2,padx=1,pady=10,sticky=W)
        age_entry=ttk.Entry(stu_info,textvariable=self.var_age,font=("times new roman",14,"bold"),width=14)
        age_entry.grid(row=1,column=3,padx=1,pady=10,sticky=W)

        #gender
        stu_gen=Label(stu_info,text="Gender:",font=("times new roman",14,"bold"),bg="white")
        stu_gen.grid(row=2,column=0,padx=1,pady=10,sticky=W)
        combo_gen=ttk.Combobox(stu_info,textvariable=self.var_gen,font=("times new roman",14,"bold"),width=15,state="readonly")
        combo_gen["value"]=("select Gender","Male","Female")
        combo_gen.current(0)
        combo_gen.grid(row=2,column=1,padx=1,pady=10,sticky=W)

        #phonenumber
        stu_num=Label(stu_info,text="Phone NO.:",font=("times new roman",14,"bold"),bg="white")
        stu_num.grid(row=2,column=2,padx=1,pady=10,sticky=W)
        num_entry=ttk.Entry(stu_info,textvariable=self.var_pno,font=("times new roman",14,"bold"),width=14)
        num_entry.grid(row=2,column=3,padx=1,pady=10,sticky=W)

        #email
        stu_email=Label(stu_info,text="Email:",font=("times new roman",14,"bold"),bg="white")
        stu_email.grid(row=3,column=0,padx=1,pady=10,sticky=W)
        email_entry=ttk.Entry(stu_info,textvariable=self.var_email,font=("times new roman",14,"bold"),width=17)
        email_entry.grid(row=3,column=1,padx=1,pady=10,sticky=W)

        #bus number
        stu_bus=Label(stu_info,text="Bus NO.:",font=("times new roman",14,"bold"),bg="white")
        stu_bus.grid(row=3,column=2,padx=1,pady=10,sticky=W)
        bus_entry=ttk.Entry(stu_info,textvariable=self.var_bus,font=("times new roman",14,"bold"),width=14)
        bus_entry.grid(row=3,column=3,padx=1,pady=10,sticky=W)
        
        #BUTTON TO SAVE UPDATE DELETE AND RESET
        btn_frame=Frame(dataleftframe,bd=2,relief=RIDGE,bg="white")
        btn_frame.place(x=0,y=321,width=538,height=163)
        heading=LabelFrame(btn_frame,bd=4,relief=RIDGE,padx=2,text="Operations",font=("times new roman",14,"bold"),fg="blue",bg="white")
        heading.place(x=0,y=0,width=538,height=163) # Student Information frame ka size yaha se change hoga
        
        #operations jo ham data pe karege 
        #save
        btn_add=Button(btn_frame,text="Save",command=self.add_data,font=("times new roman",14,"bold"),fg="white",bg="blue",width=22,height=2,cursor="hand2")
        btn_add.grid(row=0,column=0,padx=5,pady=20)

        #update
        btn_update=Button(btn_frame,text="Update",command=self.update_data,font=("times new roman",14,"bold"),fg="white",bg="blue",width=22,height=2,cursor="hand2")
        btn_update.grid(row=0,column=1,padx=5,pady=20)

        #delete
        btn_delete=Button(btn_frame,text="Delete",command=self.delete_data,font=("times new roman",14,"bold"),fg="white",bg="blue",width=22,height=2,cursor="hand2")
        btn_delete.grid(row=1,column=0,padx=8,pady=5)

        #reset
        btn_reset=Button(btn_frame,text="Reset",command=self.reset_data,font=("times new roman",14,"bold"),fg="white",bg="blue",width=22,height=2,cursor="hand2")
        btn_reset.grid(row=1,column=1,padx=8,pady=5)

        #right frame
        datarightframe=LabelFrame(Manage_frame,bd=4,relief=RIDGE,padx=2,text="Student Details",font=("times new roman",20,"bold"),fg="green",bg="white")
        datarightframe.place(x=570,y=10,width=915,height=525) #Student Details frame ka size yaha se change hoga 

        #img1
        img_1=Image.open(r"C:\Users\dahiy\OneDrive\Desktop\student\Images\images.jpeg")
        img_1=img_1.resize((900,150),Image.LANCZOS)
        self.photoimg_1=ImageTk.PhotoImage(img_1)

        my_img=Label(datarightframe,image=self.photoimg_1,bd=2,relief=RIDGE)
        my_img.place(x=0,y=0,width=900,height=150)

        #search frame to retrieve data 
        searchframe=LabelFrame(datarightframe,bd=4,relief=RIDGE,padx=2,text="Search Student information",font=("times new roman",20,"bold"),fg="green",bg="white")
        searchframe.place(x=0,y=150,width=900,height=75)

        #search label
        search_by=Label(searchframe,text="Search by:",font=("times new roman",14,"bold"),fg="red",bg="white")
        search_by.grid(row=0,column=0,padx=1,sticky=W)

        self.var_com_search=StringVar()
        combo_search=ttk.Combobox(searchframe,textvariable=self.var_com_search,font=("times new roman",14,"bold"),width=15,state="readonly")
        combo_search["value"]=("Select Attribute","Student_ID","Phone","Email")
        combo_search.current(0)
        combo_search.grid(row=0,column=1,padx=1,sticky=W)

        #input field
        self.var_search=StringVar()
        input_entry=ttk.Entry(searchframe,textvariable=self.var_search,font=("times new roman",14,"bold"),width=14)
        input_entry.grid(row=0,column=2,padx=10,sticky=W)

        #command button
        btn_search=Button(searchframe,text="Search",command=self.search_data,font=("times new roman",14,"bold"),fg="white",bg="blue",width=18,cursor="hand2")
        btn_search.grid(row=0,column=3,padx=10,sticky=W)

        btn_show_all=Button(searchframe,text="Show all",command=self.fetch_data,font=("times new roman",14,"bold"),fg="white",bg="blue",width=18,cursor="hand2")
        btn_show_all.grid(row=0,column=4,padx=8,sticky=W)


        #==================================================Student table and scroll bar ================================================================================
        table_frame=Frame(datarightframe,bd=4,relief=RIDGE)
        table_frame.place(x=0,y=225,width=900,height=260)
        
        #scroll bar making
        scroll_x=ttk.Scrollbar(table_frame,orient=HORIZONTAL)
        scroll_y=ttk.Scrollbar(table_frame,orient=VERTICAL)
        self.student_table=ttk.Treeview(table_frame,column=("v","w","x","y","z","a","b","c","d","e","f","g"),xscrollcommand=scroll_x.set,yscrollcommand=scroll_y.set)

        scroll_x.pack(side=BOTTOM,fill=X)
        scroll_y.pack(side=RIGHT,fill=Y)

        scroll_x.config(command=self.student_table.xview)
        scroll_y.config(command=self.student_table.yview)

        self.student_table.heading("v",text="Department")
        self.student_table.heading("w",text="Course")
        self.student_table.heading("x",text="Year")
        self.student_table.heading("y",text="Semester")
        self.student_table.heading("z",text="StudentID")
        self.student_table.heading("a",text="Name")
        self.student_table.heading("b",text="Section")
        self.student_table.heading("c",text="Age")
        self.student_table.heading("d",text="Gender")
        self.student_table.heading("e",text="Phone NO.")
        self.student_table.heading("f",text="Email")
        self.student_table.heading("g",text="Bus NO.")

        self.student_table["show"]="headings"

        self.student_table.column("v",width=100)
        self.student_table.column("w",width=100)
        self.student_table.column("x",width=100)
        self.student_table.column("y",width=100)
        self.student_table.column("z",width=100)
        self.student_table.column("a",width=100)
        self.student_table.column("b",width=100)
        self.student_table.column("c",width=100)
        self.student_table.column("d",width=100)
        self.student_table.column("e",width=100)
        self.student_table.column("f",width=100)
        self.student_table.column("g",width=100)
        self.student_table.pack(fill=BOTH,expand=1)
        self.student_table.bind("<ButtonRelease>",self.get_cursor)
        self.fetch_data()

    def add_data(self):
      if(self.var_dep.get()=="" or self.var_course.get()=="" or self.var_year.get()=="" or self.var_sem.get()=="" or self.var_stu_ID.get()=="" or self.var_name.get()=="" or self.var_sec.get()=="" or self.var_age.get()=="" or self.var_gen.get()=="" or self.var_pno.get()=="" or self.var_email.get()=="" or self.var_bus.get()==""):
        messagebox.showerror("ERROR","ALL fields are required!!!!!")
      else:
        try:
          conn=mysql.connector.connect(host="localhost",username="sqluser",password="password",database="studentmanagementsystem")
          my_cursor=conn.cursor()
          my_cursor.execute("insert into information values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",(
            self.var_dep.get(),
            self.var_course.get(),
            self.var_year.get(),
            self.var_sem.get(),
            self.var_stu_ID.get(),
            self.var_name.get(),
            self.var_sec.get(),
            self.var_age.get(),
            self.var_gen.get(),
            self.var_pno.get(),
            self.var_email.get(),
            self.var_bus.get()
            ))
          conn.commit()
          self.fetch_data()
          conn.close()
          messagebox.showinfo("success","info successfully added!!",parent=self.stu)
        except Exception as ex:
          messagebox.showerror("Failed",f"DUE TO:{str(ex)}",parent=self.stu)
    
    # now to display the data side by side
    def fetch_data(self):
      conn=mysql.connector.connect(host="localhost",username="sqluser",password="password",database="studentmanagementsystem")
      my_cursor=conn.cursor()
      my_cursor.execute("select * from information")
      data=my_cursor.fetchall()
      if (len(data)!=0):
         self.student_table.delete(*self.student_table.get_children())
         for i in data:
          self.student_table.insert("",END,values=i)
         conn.commit()
      conn.close()      

    # data extract krne k liye wapis fields m 
    def get_cursor(self,event=""):
       cursor_row=self.student_table.focus()
       content=self.student_table.item(cursor_row)
       data=content["values"]

       self.var_dep.set(data[0])
       self.var_course.set(data[1])
       self.var_year.set(data[2]) 
       self.var_sem.set(data[3])
       self.var_stu_ID.set(data[4])
       self.var_name.set(data[5])
       self.var_sec.set(data[6])
       self.var_age.set(data[7])
       self.var_gen.set(data[8])
       self.var_pno.set(data[9])
       self.var_email.set(data[10])
       self.var_bus.set(data[11])
    def update_data(self):
       if(self.var_dep.get()=="" or self.var_course.get()=="" or self.var_year.get()=="" or self.var_sem.get()=="" or self.var_stu_ID.get()=="" or self.var_name.get()=="" or self.var_sec.get()=="" or self.var_age.get()=="" or self.var_gen.get()=="" or self.var_pno.get()=="" or self.var_email.get()=="" or self.var_bus.get()==""):
          messagebox.showerror("ERROR","ALL fields are required!!!!!")
       else:
          try:
             update=messagebox.askyesno("update","are you sure about updating",parent=self.stu)
             if update>0:
                conn=mysql.connector.connect(host="localhost",username="root",password="1234",database="studentmanagementsystem")
                my_cursor=conn.cursor()
                my_cursor.execute("update information set department=%s,course=%s,year=%s,semester=%s,name=%s,section=%s,age=%s,gender=%s,Phone=%s,email=%s,bus=%s where Student_ID=%s",
                                  (self.var_dep.get(),
                                  self.var_course.get(),
                                  self.var_year.get(),
                                  self.var_sem.get(),
                                  self.var_name.get(),
                                  self.var_sec.get(),
                                  self.var_age.get(),
                                  self.var_gen.get(),
                                  self.var_pno.get(),
                                  self.var_email.get(),
                                  self.var_bus.get(),
                                  self.var_stu_ID.get()
                                  ))
             else:
                if not update:
                   return
             conn.commit()
             self.fetch_data()
             conn.close()
            
             messagebox.showinfo("Success","updated successfully!!",parent=self.stu)
          except Exception as ex:
            messagebox.showerror("Failed",f"DUE TO:{str(ex)}",parent=self.stu)
    # delete function making 
    def delete_data(self):
       try:
          Delete=messagebox.askyesno("Delete","are you sure about deleting",parent=self.stu)
          if Delete>0:
             conn=mysql.connector.connect(host="localhost",username="sqluser",password="password",database="studentmanagementsystem")
             my_cursor=conn.cursor()
             my_cursor.execute("delete from information where student_ID=%s",(self.var_stu_ID.get(),))
          else:
              if not Delete:
                  return
          conn.commit()
          self.fetch_data()
          conn.close()
            
          messagebox.showinfo("Success","deleted successfully!!",parent=self.stu)
       except Exception as ex:
        messagebox.showerror("Failed",f"DUE TO:{str(ex)}",parent=self.stu)
    # reset all the data 
    def reset_data(self):
       self.var_dep.set("Select Department")
       self.var_course.set("Select Course")
       self.var_year.set("Select Year") 
       self.var_sem.set("Select Semester")
       self.var_stu_ID.set("")
       self.var_name.set("")
       self.var_sec.set("")
       self.var_age.set("")
       self.var_gen.set("Select Gender")
       self.var_pno.set("")
       self.var_email.set("")
       self.var_bus.set("")
    
    #searching data
    def search_data(self):
       if (self.var_com_search.get()=="" or self.var_search.get()==""):
          messagebox.showerror("ERROR","please select any option")
       else:
          try:
            conn=mysql.connector.connect(host="localhost",username="sqluser",password="password",database="studentmanagementsystem")
            my_cursor=conn.cursor()
            my_cursor.execute("select * from information where "+str(self.var_com_search.get())+" LIKE '%"+str(self.var_search.get())+"%'")
            data=my_cursor.fetchall()
            if len(data)!=0:
               self.student_table.delete(*self.student_table.get_children())
               for i in data:
                  self.student_table.insert("",END,values=i)
               conn.commit()
            conn.close()
          except Exception as ex:
            messagebox.showerror("Failed",f"DUE TO:{str(ex)}",parent=self.stu)

             
                      
if __name__== "__main__":
    stu=Tk()
    obj=student(stu)
    stu.mainloop()
    